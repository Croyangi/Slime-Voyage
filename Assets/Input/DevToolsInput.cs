//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input/DevToolsInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @DevToolsInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @DevToolsInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""DevToolsInput"",
    ""maps"": [
        {
            ""name"": ""CardinalDirections"",
            ""id"": ""053fe0ad-d8a2-4513-851a-758dbf4285c5"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""cb03dd0e-0917-4e74-b9a4-a57977a3a6f1"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""a7f8b712-8f78-4903-97bc-9249d29dd428"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""90d3282e-15a7-4069-bfa3-c1ca78a52164"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""e4e76882-9cec-43d7-b7f1-6dd75fffb8c4"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""78db2fdb-ad3c-41df-895f-91d172e3c89f"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""e60ef63e-0709-437d-939b-0dec3aa1d985"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Arrowkeys"",
                    ""id"": ""0532ce09-d0cb-4a0a-bacf-5bdd3a2af5c6"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""8866c9d5-3b2a-44e8-914a-d4db19d8e7ce"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""efc4fa11-d1b9-47dd-b099-cc5ce3fc75db"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""8e19e78e-e3d1-427f-afdf-3a52b79d6c97"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""adefa548-44fa-47e0-852c-858e85534e68"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Toggle"",
            ""id"": ""0e4d62e1-6b07-4b52-89aa-f43de9ff758f"",
            ""actions"": [
                {
                    ""name"": ""CombinationD"",
                    ""type"": ""Button"",
                    ""id"": ""22b21f1c-26dc-43c4-95da-4bf263232297"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""CombinationE"",
                    ""type"": ""Button"",
                    ""id"": ""313520fb-e063-4721-a02b-e93b85f81eff"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""CombinationV"",
                    ""type"": ""Button"",
                    ""id"": ""6c965a6b-c033-42c9-964d-2c920429e934"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""fe6521d3-43b7-4987-a687-b89dfcce4f17"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CombinationD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""efa7469a-d72f-44db-82d5-f9d6332b57ab"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CombinationE"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""50f1875a-46a5-473a-a37d-0d7ada614317"",
                    ""path"": ""<Keyboard>/v"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CombinationV"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // CardinalDirections
        m_CardinalDirections = asset.FindActionMap("CardinalDirections", throwIfNotFound: true);
        m_CardinalDirections_Movement = m_CardinalDirections.FindAction("Movement", throwIfNotFound: true);
        // Toggle
        m_Toggle = asset.FindActionMap("Toggle", throwIfNotFound: true);
        m_Toggle_CombinationD = m_Toggle.FindAction("CombinationD", throwIfNotFound: true);
        m_Toggle_CombinationE = m_Toggle.FindAction("CombinationE", throwIfNotFound: true);
        m_Toggle_CombinationV = m_Toggle.FindAction("CombinationV", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // CardinalDirections
    private readonly InputActionMap m_CardinalDirections;
    private List<ICardinalDirectionsActions> m_CardinalDirectionsActionsCallbackInterfaces = new List<ICardinalDirectionsActions>();
    private readonly InputAction m_CardinalDirections_Movement;
    public struct CardinalDirectionsActions
    {
        private @DevToolsInput m_Wrapper;
        public CardinalDirectionsActions(@DevToolsInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_CardinalDirections_Movement;
        public InputActionMap Get() { return m_Wrapper.m_CardinalDirections; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CardinalDirectionsActions set) { return set.Get(); }
        public void AddCallbacks(ICardinalDirectionsActions instance)
        {
            if (instance == null || m_Wrapper.m_CardinalDirectionsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CardinalDirectionsActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
        }

        private void UnregisterCallbacks(ICardinalDirectionsActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
        }

        public void RemoveCallbacks(ICardinalDirectionsActions instance)
        {
            if (m_Wrapper.m_CardinalDirectionsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICardinalDirectionsActions instance)
        {
            foreach (var item in m_Wrapper.m_CardinalDirectionsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CardinalDirectionsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CardinalDirectionsActions @CardinalDirections => new CardinalDirectionsActions(this);

    // Toggle
    private readonly InputActionMap m_Toggle;
    private List<IToggleActions> m_ToggleActionsCallbackInterfaces = new List<IToggleActions>();
    private readonly InputAction m_Toggle_CombinationD;
    private readonly InputAction m_Toggle_CombinationE;
    private readonly InputAction m_Toggle_CombinationV;
    public struct ToggleActions
    {
        private @DevToolsInput m_Wrapper;
        public ToggleActions(@DevToolsInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @CombinationD => m_Wrapper.m_Toggle_CombinationD;
        public InputAction @CombinationE => m_Wrapper.m_Toggle_CombinationE;
        public InputAction @CombinationV => m_Wrapper.m_Toggle_CombinationV;
        public InputActionMap Get() { return m_Wrapper.m_Toggle; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ToggleActions set) { return set.Get(); }
        public void AddCallbacks(IToggleActions instance)
        {
            if (instance == null || m_Wrapper.m_ToggleActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ToggleActionsCallbackInterfaces.Add(instance);
            @CombinationD.started += instance.OnCombinationD;
            @CombinationD.performed += instance.OnCombinationD;
            @CombinationD.canceled += instance.OnCombinationD;
            @CombinationE.started += instance.OnCombinationE;
            @CombinationE.performed += instance.OnCombinationE;
            @CombinationE.canceled += instance.OnCombinationE;
            @CombinationV.started += instance.OnCombinationV;
            @CombinationV.performed += instance.OnCombinationV;
            @CombinationV.canceled += instance.OnCombinationV;
        }

        private void UnregisterCallbacks(IToggleActions instance)
        {
            @CombinationD.started -= instance.OnCombinationD;
            @CombinationD.performed -= instance.OnCombinationD;
            @CombinationD.canceled -= instance.OnCombinationD;
            @CombinationE.started -= instance.OnCombinationE;
            @CombinationE.performed -= instance.OnCombinationE;
            @CombinationE.canceled -= instance.OnCombinationE;
            @CombinationV.started -= instance.OnCombinationV;
            @CombinationV.performed -= instance.OnCombinationV;
            @CombinationV.canceled -= instance.OnCombinationV;
        }

        public void RemoveCallbacks(IToggleActions instance)
        {
            if (m_Wrapper.m_ToggleActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IToggleActions instance)
        {
            foreach (var item in m_Wrapper.m_ToggleActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ToggleActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ToggleActions @Toggle => new ToggleActions(this);
    public interface ICardinalDirectionsActions
    {
        void OnMovement(InputAction.CallbackContext context);
    }
    public interface IToggleActions
    {
        void OnCombinationD(InputAction.CallbackContext context);
        void OnCombinationE(InputAction.CallbackContext context);
        void OnCombinationV(InputAction.CallbackContext context);
    }
}
